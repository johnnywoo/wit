#!/usr/bin/env php
<?php

/**
 * Phpt converter for blackbox tests
 *
 * Creates a blackbox_*.phpt file in currect directory for every
 * blackbox/*.test. Obsolete phpt files will be removed.
 *
 * phpt is a test file format for testing framework of PEAR.
 * This script takes blackbox tests (which are implementation-agnostic)
 * and converts them into phpt files, which we can then actually run
 * with pyrus and therefore test our PHP implementation of Wit, along
 * with implementation-specific tests which are already written as phpt.
 */

function nice_unlink($file)
{
	if(file_exists($file))
		unlink($file);
}

foreach(glob(__DIR__ . '/blackbox_*.phpt') as $fname)
{
	$base = substr($fname, 0, -5);
	nice_unlink($fname);
	nice_unlink($base.'.diff');
	nice_unlink($base.'.exp');
	nice_unlink($base.'.log');
	nice_unlink($base.'.out');
	nice_unlink($base.'.php');
}

foreach(glob(__DIR__ . '/blackbox/*.test') as $fname)
{
	$name = basename($fname);

	$text = file_get_contents($fname);
	$matches = preg_split("/^--([^\s-]+)--(?:\n|$)/m", $text, -1, PREG_SPLIT_DELIM_CAPTURE);
	array_unshift($matches, 'FILE');

	$sections = array();
	foreach($matches as $i => $section)
	{
		// iterate over pairs
		if($i % 2)
			continue;
		$sections[$section] = $matches[$i + 1];
	}

	$json  = isset($sections['INPUT']) ? trim($sections['INPUT']) : '';
	$input = strlen($json) ? json_decode($json, true) : array();

	$file = $sections['FILE'];

	if(!isset($sections['EXPECT']) && isset($sections['EXPECT-ERROR']))
		$sections['EXPECT'] = $sections['EXPECT-ERROR'];
	$is_expect_vague = !isset($sections['EXPECT']);
	$expect = $is_expect_vague ? (isset($sections['EXPECT-ERROR']) ? 'error' : 'ok') : $sections['EXPECT'];

	$phpt =
'--TEST--
'.$name.'
--FILE--
<?php
$template = '.var_export($file, true).';
$input    = '.var_export($input, true).';
try
{
	$output = "magic";

	echo '.($is_expect_vague ? '"ok"' : '$output').';
}
catch(wit\Exception $e)
{
	echo '.($is_expect_vague ? '"error"' : '$e->getMessage()."\n"').';
	exit(1);
}
catch(Exception $e)
{
	echo '.($is_expect_vague ? '"error"' : 'get_class($e).": ".$e->getMessage()."\n"').';
	exit(1);
}
?>
--EXPECT--
'.$expect;

	$phpt_fname = __DIR__ . '/blackbox_' . basename($fname, '.test') . '.phpt';
	file_put_contents($phpt_fname, $phpt);
	echo $phpt_fname . "\n";
}
